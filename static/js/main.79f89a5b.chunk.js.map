{"version":3,"sources":["components/AdminPage.jsx","api/index.js","components/HomePage.jsx","components/RestaurantPage.jsx","App.js","serviceWorker.js","index.js"],"names":["Component","restaurantApi","fetch","then","response","json","myJson","console","log","HomePage","props","dateObj","Date","nowTime","getFullYear","getMonth","getDate","getHours","getMinutes","getDay","state","restaurantList","res","map","item","index","key","name","time","setState","className","this","type","placeholder","Table","striped","bordered","hover","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sTAEwBA,Y,OCOTC,EATOC,MAAM,yBACvBC,MAAK,SAAUC,GACZ,OAAOA,EAASC,UAEnBF,MAAK,SAAUG,GAEZ,OADAC,QAAQC,IAAIF,GACLA,KCyCAG,E,YA1CX,WAAYC,GAAQ,IAAD,sBACf,4CAAMA,IACN,IAAMC,EAAU,IAAIC,KAEdC,EAAO,UAAMF,EAAQG,cAAd,YAA+BH,EAAQI,WAAa,EAApD,YAAyDJ,EAAQK,UAAjE,aAA+EL,EAAQM,WAAvF,YAAqGN,EAAQO,aAA7G,YADI,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OACuFP,EAAQQ,SAAW,IAJvJ,OAKf,EAAKC,MAAQ,CAAEC,eAAgB,GAAIR,WALpB,E,iFAQE,IAAD,OAChBZ,EAAcE,MAAK,SAACmB,GAChB,IAAMD,EAAiBC,EAAIC,KAAI,SAACC,EAAMC,GAAP,OAAiB,wBAAIC,IAAKD,GACrD,4BAAKA,GACL,4BAAKD,EAAKG,MACV,4BAAKH,EAAKI,UAEd,EAAKC,SAAS,CAAER,wB,+BAKpB,OACI,6BACI,wCACA,yBAAKS,UAAU,QAAO,0DAAtB,IAAyCC,KAAKX,MAAMP,SACpD,2BAAOmB,KAAK,OAAOC,YAAY,6BAC/B,kBAACC,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,GACzB,+BACI,4BACI,iCACA,oCACA,2CAGR,+BACKN,KAAKX,MAAMC,sB,GAnCbrB,aCFMA,YCoBdsC,MARf,WACE,OACE,yBAAKR,UAAU,aACb,kBAAC,EAAD,QCLcS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/C,MAAK,SAAAgD,GACjCA,EAAaC,kB","file":"static/js/main.79f89a5b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass AdminPage extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>AdminPage</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AdminPage","const restaurantApi = fetch('http://localhost:8080')\r\n    .then(function (response) {\r\n        return response.json();\r\n    })\r\n    .then(function (myJson) {\r\n        console.log(myJson);\r\n        return myJson\r\n    });\r\n\r\nexport default restaurantApi","import React, { Component } from \"react\";\r\nimport { Table } from 'react-bootstrap';\r\nimport restaurantApi from '../api/index'\r\n\r\nclass HomePage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const dateObj = new Date()\r\n        const dayArray = ['Mon', 'Tue', 'Wed', 'Thr', 'Fri', 'Sat', 'Sun']\r\n        const nowTime = `${dateObj.getFullYear()}/${dateObj.getMonth() + 1}/${dateObj.getDate()}  ${dateObj.getHours()}:${dateObj.getMinutes()} ${dayArray[dateObj.getDay() - 1]}`\r\n        this.state = { restaurantList: [], nowTime };\r\n    }\r\n\r\n    componentDidMount() {\r\n        restaurantApi.then((res) => {\r\n            const restaurantList = res.map((item, index) => <tr key={index}>\r\n                <td>{index}</td>\r\n                <td>{item.name}</td>\r\n                <td>{item.time}</td>\r\n            </tr>)\r\n            this.setState({ restaurantList });\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>HomePage</h1>\r\n                <div className=\"time\"><span>目前時間</span> {this.state.nowTime}</div>\r\n                <input type=\"text\" placeholder=\"查詢餐廳\" />\r\n                <Table striped bordered hover>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>#</th>\r\n                            <th>Name</th>\r\n                            <th>Open Time</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.state.restaurantList}\r\n                    </tbody>\r\n                </Table>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default HomePage","import React, { Component } from \"react\";\r\n\r\nclass RestaurantPage extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Restaurant</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default RestaurantPage","import React from 'react';\nimport './App.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport Admin from './components/AdminPage'\nimport Home from './components/HomePage'\nimport Restaurant from './components/RestaurantPage'\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <Home></Home>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}